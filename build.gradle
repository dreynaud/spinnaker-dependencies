buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
        classpath 'com.netflix.nebula:nebula-release-plugin:3.1.0'
    }
}

apply plugin: 'nebula.nebula-release'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'maven'

group = 'com.netflix.spinnaker'
description = 'Common dependencies for Spinnaker'

release {
  defaultVersionStrategy = nebula.plugin.release.NetflixOssStrategies.SNAPSHOT
}

publishing {
  publications {
    spinnakerDependencies(MavenPublication) {
      artifact 'src/spinnaker-dependencies.yml'
    }
  }
}

def prop = { String name ->
  project.hasProperty(name) ? project.property(name) : ''
}

bintray {
  user = prop('bintrayUser')
  key = prop('bintrayKey')
  publications = ['spinnakerDependencies']
  publish = true
  dryRun = false
  pkg {
    userOrg = 'spinnaker'
    repo = 'spinnaker'
    name = project.name
    desc = prop('description')
    licenses = ['Apache-2.0']
    websiteUrl = 'https://github.com/spinnaker/spinnaker-dependencies'
    vcsUrl = 'https://github.com/spinnaker/spinnaker-dependencies.git'
    issueTrackerUrl = 'https://github.com/spinnaker/spinnaker/issues'
    attributes = [:]
    version {
      name = project.version
      vcsTag = "v${project.version}"
      attributes = [:]
    }
  }
}

project.gradle.taskGraph.whenReady { graph ->
  bintrayUpload.onlyIf {
    graph.hasTask(':final') || graph.hasTask(':candidate')
  }
}

task('updateDependencies', description: "Rebuilds spinnaker-dependencies.yml based on spring-boot-dependencies POM.") << {
  // use https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies as the basis for making suggested changes to spinnaker-dependencies.yml
  def springBootVersion = '2.0.2.RELEASE'
  println "Updating version settings based on ${springBootVersion}..."

  // load from template
  def dependencies = new File('src/spinnaker-dependencies.template').text

  def url = "https://repo.spring.io/release/org/springframework/boot/spring-boot-dependencies/${springBootVersion}/spring-boot-dependencies-${springBootVersion}.pom"
  logger.info("loading pom file from ${url}")
  def pom = new XmlSlurper().parse(url)

  pom.dependencyManagement.dependencies.children().each { depNode ->
    logger.info "${depNode.groupId}:${depNode.artifactId}:${depNode.version}"

    // depNode.version can be a symbol like '${spring.version}' in 'org.springframework:spring-core:${spring.version}'
    // we want to resolve that to an actual version number in the properties section
    def versionSymbol = depNode.version.text()
    def versionProperty = versionSymbol.substring(2, versionSymbol.length() - 1)
    def versionNumber = versionSymbol.startsWith('${')
      ? pom.properties[versionProperty].text()
      : versionSymbol
    logger.info "${versionProperty}: ${versionNumber}"

    dependencies = dependencies.replaceAll("\\{\\{${depNode.groupId}:${depNode.artifactId}}}", versionNumber)
  }

  // write results to yml
  new File('src/spinnaker-dependencies.yml').withWriter { writer ->
    writer.write(dependencies)
  }
}

tasks.build.dependsOn(updateDependencies)
tasks.bintrayUpload.dependsOn(build)
tasks.publishToMavenLocal.dependsOn(build)
tasks.release.dependsOn(updateDependencies, bintrayUpload)

